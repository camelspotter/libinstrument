#include <arpa/inet.h> {
	htons()
	inet_addr()
}


#include <bfd.h> {
	asymbol
	bfd
	bfd_canonicalize_symtab()
	bfd_check_format()
	bfd_close()
	bfd_errmsg()
	bfd_error
	bfd_get_error()
	bfd_get_section_vma()
	bfd_get_symtab_upper_bound()
	bfd_init()
	bfd_object
	bfd_openr()
	BSF_FUNCTION
	SEC_CODE
}


#include <cctype> {
	isspace()
}


#include <cerrno> {
	EAGAIN
	EINTR
	ENOENT
	errno
}


#include <climits> {
	PATH_MAX
}


#include <cstdarg> {
	va_copy()
	va_end()
	va_list
	va_start()
	vsnprintf()
	vsprintf()
}


#include <cstdlib>{
	EXIT_FAILURE
	exit()
	getenv()
}


#include <cstring> {
	strcasecmp()
	strcmp()
	strcpy()
	strerror()
	strlen()
	strncpy()
	strstr()
}


#include <cxxabi.h> {
	abi::__cxa_demangle()
}


#include <dlfcn.h> {
	dlclose()
	dlerror()
	dlopen()
	dlsym()
	RTLD_LAZY
	RTLD_LOCAL
	RTLD_NOLOAD
}


#include <fcntl.h> {
	close()
	O_APPEND
	O_CREAT
	O_NOCTTY
	O_RDONLY
	O_WRONLY
	open()
}


#include <iostream> {
	std::cerr
	std::cout
	std::dec
	std::endl
	std::exception
	std::hex
	std::nothrow
	std::ostream
	std::type_info
	std::uncaught_exception()
}


#include <libgen.h> {
	basename()
}


#include <pthread.h> {
	pthread_cancel()
	pthread_create()
	pthread_equal()
	pthread_join()
	pthread_mutex_lock()
	pthread_mutex_t
	pthread_mutex_unlock()
	PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
	pthread_self()
	pthread_t
}


#include <regex.h> {
	REG_EXTENDED
	REG_ICASE
	REG_NOSUB
	regcomp()
	regerror()
	regex_t
	regexec()
	regfree()
	regmatch_t
	regoff_t
}


#include <sys/file.h> {
	flock()
	LOCK_EX
	LOCK_UN
}


#include <sys/mman.h> {
	MAP_FAILED
	MAP_SHARED
	mmap()
	munmap()
	PROT_READ
}


#include <sys/socket.h> {
	AF_INET
	connect()
	setsockopt()
	shutdown()
	SOCK_STREAM
	sockaddr
	sockaddr_in
	socket()
	SOL_SOCKET
}


#include <sys/stat.h> {
	fstat()
	S_IRGRP
	S_IROTH
	S_IRUSR
	S_ISCHR
	S_ISREG
	S_IWGRP
	S_IWOTH
	S_IWUSR
	stat()
	struct stat
}


#include <sys/time.h> {
	gettimeofday()
	struct timeval
}


#include <termios.h> {
	B115200
	B19200
	B230400
	B38400
	B460800
	B57600
	B9600
	CLOCAL
	CRTSCTS
	CREAD
	CS8
	IGNPAR
	struct termios
	tcdrain()
	tcflush()
	TCIOFLUSH
	TCSANOW
	tcsetattr()
	VMIN
}


#include <unistd.h> {
	dup()
	fdatasync()
	fsync()
	ftruncate()
	getegid()
	geteuid()
	getpid()
	isatty()
	lseek()
	pid_t
	readlink()
	SEEK_CUR
	SEEK_SET
	write()
}
