dictionary {
	consider sorting

	consider caching
}


file {
	recode unique_id to return a new file object

	add a specifier for a fixed length random string to unique_id
}


filter {
	ready to make copyable
}


generic {
	study and finalize license

	consider inter-collection methods (join, intersect, add)

	research converting types to immutables (more expensive, easier to use)

	check UNIX, Cygwin, MinGW, Android Linux portability
}


object {
	consider adding equals, hashcode, to_string, serialize, identity
}


list {
	consider providing sorting
}


plugin {
	transform to interceptor, either by renaming or subclassing
}


stream {
	consider adding method try_lock
}


string {
	use std::regex (at least C++11) for portability

	implement i18n and l10n, convert to unicode or create a UTF-8 type

	consider adding slicing, is* checks

	test with advanced printf formats (with lengths, padding etc)

	research how to manipulate using specific number of characters
}


style {
	ensure proper use of exit escape sequence
}


symtab {
	sort the table by address and implement binary lookup
}


tcp_socket {
	consider adding domain name lookup (getaddrinfo will also resolve IPv4 vs IPv6)

	implement connection drop detection (SO_KEEPALIVE, SIGPIPE)

	fine tune socket options (buffer size, linger, no-delay e.t.c)

	test TCP_NODELAY option or other means to flush cached network data

	exploit shutdown on close
}


thread {
	use std::thread (at least C++11) class for portability

	find a way to obtain current call arguments

	store the entry method (to detect thread exit)
}
